plugins {
    id("dev.architectury.loom").version("1.4-SNAPSHOT").apply(false)
    id("maven-publish")
    id("org.ajoberstar.grgit").version("5.2.1")
    id("signing")
    id("com.replaymod.preprocess").version("16a0d7b710")
}

preprocess {
    def mc1165 = createNode("1.16.5", 1_16_05, "mojang")
    def mc1182 = createNode("1.18.2", 1_18_02, "mojang")
    def mc1192 = createNode("1.19.2", 1_19_02, "mojang")
    def mc1201 = createNode("1.20.1", 1_20_01, "mojang")

    mc1165.link(mc1182, file("versions/mapping-1.16.5-1.18.2.txt"))
    mc1182.link(mc1192, file("versions/mapping-1.18.2-1.19.2.txt"))
    mc1192.link(mc1201, file("versions/mapping-1.19.2-1.20.1.txt"))
}

ext {
    Map<String, String> environmentMap = System.getenv()
    File localPropsFile = file("${rootDir}/local.properties")

    if (localPropsFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(localPropsFile))
        p.each { key,  value ->
            ext[key as String] = value
        }
    }

    getVersionGit = { List paths ->
        if (grgit == null) {
            return "nogit"
        }

        List latestCommits = paths.isEmpty() ? grgit.log(maxCommits: 1) : grgit.log(paths: paths, maxCommits: 1)
        return latestCommits.isEmpty() ? "uncommited" : "${latestCommits.get(0).id.substring(0, 7)}"
    }

    getBuildNumber = {
        return environmentMap.GITHUB_RUN_NUMBER ? environmentMap.GITHUB_RUN_NUMBER : Integer.MAX_VALUE
    }

    getVersionType = {
        switch (getOrDefault("ow.build.environment.buildType", environmentMap.BUILD_TYPE)) {
            case "RELEASE":
                return "stable"
            case "BETA":
                return "beta"
            default:
                return "dev"
        }
    }

    getVersionPatch = { List paths ->
        if (grgit == null) {
            return 0
        }

        List latestCommits = paths.isEmpty() ? grgit.log() : grgit.log(paths: paths)
        return latestCommits.size()
    }

    getMavenArtifactVersion = {
        return project.getVersionType() == "stable" ? "${project.mod_version}.${project.getVersionPatch([])}" : project.version
    }

    getENV = {
        return environmentMap
    }

    isCIEnvironment = {
        return environmentMap.GITHUB_RUN_NUMBER
    }

    getOrDefault = { String key, String defaultValue ->
        String value
        (value = project.findProperty(key)) && !value.isEmpty() ? value : defaultValue
    }

    String mavenCentral_username = project.getOrDefault("secrets.mavenCentral.username", project.getENV().MAVEN_CENTRAL_USERNAME)
    String mavenCentral_password = project.getOrDefault("secrets.mavenCentral.password", project.getENV().MAVEN_CENTRAL_PASSWORD)

    addPomMetadataInformation = { Project project, MavenPublication publication ->
        publication.pom {
            name.set("${project.mod_name}")
            description.set("${project.mod_description}")
            url.set("${project.mod_sources}")

            licenses {
                license {
                    name.set("${project.mod_license}")
                    url.set("${project.mod_license_url}")
                }
            }

            developers {
                developer {
                    id.set("${project.author_id}")
                    name.set("${project.author_name}")
                    email.set("${project.author_email}")
                }
            }

            scm {
                connection.set("scm:git:${project.mod_sources}.git")
                developerConnection.set("scm:git:${project.mod_sources.replace("https", "ssh")}.git")
                url.set("${project.mod_sources}")
            }
        }
    }

    isMavenCentralCredentialsExist = {
        return mavenCentral_username && mavenCentral_password
    }

    credentialsMavenCentral = { MavenArtifactRepository maven ->
        maven.credentials {
            username(mavenCentral_username)
            password(mavenCentral_password)
        }
    }

    getModVersion = {
        return "${project.mod_version}.${getVersionPatch([])}+${getVersionGit([])}-${getVersionType()}"
    }
}

setVersion(project.getModVersion())

tasks.register("cleanPreprocessSources") {
    it.group("${project.mod_id}")

    doFirst {
        subprojects {
            def path = project.projectDir.toPath().resolve("build/preprocessed")
            path.toFile().deleteDir()
        }
    }
}

tasks.register("genLocalProperties") {
    it.group("${project.mod_id}")

    doFirst {
        File localPropsFile = file("${rootDir}/local.properties")

        if (localPropsFile.exists()) {
            throw new IllegalStateException("local.properties file already generated. If you want to regenerate it, please delete it manually first")
        } else {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(localPropsFile))
            bufferedWriter.writeLine("# Secrets")
            bufferedWriter.writeLine("secrets.gpg.signingKey=")
            bufferedWriter.writeLine("secrets.gpg.signingPassword=")
            bufferedWriter.writeLine("secrets.mavenCentral.username=")
            bufferedWriter.writeLine("secrets.mavenCentral.password=")
            bufferedWriter.writeLine("")
            bufferedWriter.writeLine("# Overwritten configurations")
            bufferedWriter.writeLine("ow.build.environment.buildType=")
            bufferedWriter.writeLine("ow.game.window.width=")
            bufferedWriter.writeLine("ow.game.window.height=")
            bufferedWriter.writeLine("ow.game.window.username=")
            bufferedWriter.close()

            project.getLogger().info("local.properties generated successfully!")
        }
    }
}

subprojects {
    tasks.withType(PublishToMavenRepository).configureEach {
        def predicate = provider {
            repository == publishing.repositories.mavenLocal ||
            (repository == publishing.repositories.projectLocalSnapshot && publication == publishing.publications.snapshot) ||
                    (repository == publishing.repositories.projectLocalRelease && publication == publishing.publications.release) ||
                    (repository == publishing.repositories.mavenCentralSnapshot && publication == publishing.publications.snapshot && project.isMavenCentralCredentialsExist()) ||
                    (repository == publishing.repositories.mavenCentralRelease && publication == publishing.publications.release && project.isMavenCentralCredentialsExist())
        }

        onlyIf {
            predicate.get()
        }
    }
}
